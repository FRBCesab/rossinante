[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rossinante Book",
    "section": "",
    "text": "Welcome\nThe purpose of this book is to show how to use the FRB-CESAB server Rossinante, dedicated to medium performance scientific computing."
  },
  {
    "objectID": "chapters/introduction.html",
    "href": "chapters/introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "The FRB-CESAB server Rossinante is dedicated to medium performance scientific computing (see Table 1.1 for hardware specification). It runs under the Operating System (OS) Ubuntu Server 20.04 LTS (Focal Fossa).\nWhen do you need to use Rossinante?\n\nYou need to analyse large datasets (RAM operations), and/or,\nYou need to repeat tasks many times (parallelization on CPU/GPU).\n\n\n\nTable 1.1: Hardware specifications\n\n\n\n\n\n\nHardware\nSpecifications\n\n\n\n\nCPU\n80 threads (2 x Intel Xeon Gold 5218R)\n\n\nRAM\n384 GB (12 x Cells 32 Go RDIMM)\n\n\nGPU\nNVIDIA Quadro RTX 6000\n\n\nInternal storage\n6 TB (8 x 960 GB SSD SATA)\n\n\nExternal storage (Seagate)\n8 TB (1 x 8 To HDD USB 3.0 5900 tr/min)\n\n\nExternal storage (Cervantes)\n8 TB (1 x 8 To HDD USB 3.0 5900 tr/min)\n\n\nExternal storage (Sancho)\n8 TB (1 x 8 To HDD USB 3.0 5900 tr/min)\n\n\n\n\nYou can run programs implemented in R, Python, Julia, Shell script, C, C++, etc. directly from a terminal or using Web clients like RStudio Server or Jupyter Notebook.\n\n\n\n\n\n\nImportant\n\n\n\nNo job scheduling system (e.g. SLURM, Torque) has been installed. This means that you can launch jobs whenever you want. However you are invited to read Chapter 3 (Good practices).\n\n\nWhat are the available software?\n\nR (latest version)\nRStudio Server\nPython (latest version)\npip3 and Conda – Python packages managers\nJupyter Notebook\nJulia\nLaTeX3\nPandoc\nQuarto\ngit\nDocker\n\nAnd some useful utilities:\n\nCUDA – Deep Learning\nFFmpeg – Transcoding multimedia files\nImageMagick – Image manipulation program\nPoppler – PDF utility library\nGDAL, GEOS, PROJ – Spatial libraries\nhtop and btop – CPU, RAM, and processes monitoring tool\nnvtop – NVIDIA GPU monitoring tool\nnano and vim – CLI text editors\nscreen and tmux – Terminal multiplexers\ntree – Recursive directory listing program\ncurl and wget – Download managers\nzip and unzip – ZIP files managers\n\nCan you do everything you want on Rossinante?\nNo!\nRossinante has only one administrator. Regular user, like you, has limited permissions.\nFor instance, you have only access to a personal directory: /home/you/. If you ask you can also have a personal space in one or more external drives (e.g. /media/cervantes/you).\nIf you need to use a non-installed software, please contact the administrator. Note that each user has a personal R library in which he/she can install every R packages he/she wants (independently of other users). For Python, packages are shared among all users (except if you work with virtual environments [recommended]).\n\n\n\n\n\n\nImportant\n\n\n\nRossinante is not a storage server. Its limited storage is shared among all users. You can store large dataset to run yours analyses, but once you’ve finished, please remove these files."
  },
  {
    "objectID": "chapters/setup.html#ssh-connection",
    "href": "chapters/setup.html#ssh-connection",
    "title": "2  Setup",
    "section": "2.1 SSH connection",
    "text": "2.1 SSH connection\nTo open an SSH connection, you need to launch a terminal (all modern terminals include an SSH client1):1 On Windows, you don’t need anymore to install Putty.\n\nOn Unix-based OS (macOS and GNU/Linux), open the app called Terminal\nOn Windows, open the Git Bash app2 (installed by default with the git software)\n\n2 Don’t use PowerShell or RStudio terminal. They can be unstable. Git Bash allows you to use GNU/Linux commands on Windows.# SSH connection to Rossinante ----\nssh -p 22 jdoe@92.168.45.3\nWhen you first connect to Rossinante (and to any remote server), you will be asked if you trust this server:\nThe authenticity of host '[92.168.45.3]:22' can't be established.\nRSA key fingerprint is ...\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\nJust write yes and press Enter. This will add a line in the file ~/.ssh/known_hosts that lists all your trusted servers.\nRun the previous command a second time to connect to Rossinante. You’ll be asked to change your password. Enter the old password and set your new password (twice).\nYour prompt will look like (a reconnection may be necessary): jdoe@rossinante:~$. This means that you are now connected to Rossinante under the username jdoe.\nYou can check your current directory with the command pwd:\n# Print working (current) directory ----\npwd\n## /home/jdoe\nTo stop the SSH connection, use the command exit:\n# Close the SSH connection ----\nexit\n## Connection to 92.168.45.3 closed."
  },
  {
    "objectID": "chapters/setup.html#ssh-config-file",
    "href": "chapters/setup.html#ssh-config-file",
    "title": "2  Setup",
    "section": "2.2 SSH config file",
    "text": "2.2 SSH config file\nIt can be painful to remember the IP address and the SSH port of Rossinante, especially if you use several servers. Fortunately you can store Rossinante connection information in a special file located on your laptop (not in the server): config. The file must be stored in the hidden folder .ssh/ located in your personal home directory.\nTo create this config file, open a terminal (or Git Bash for Windows users):\n# Navigate to your home directory ----\ncd ~\n\n# Check if the folder .ssh/ exists ----\nls -al\n\n# Create a new hidden folder (if required) ----\nmkdir -p ~/.ssh\n\n# Change folder permissions ----\n# (only Jane can read, write, and execute this folder)\nchmod -R 700 ~/.ssh\n\n# Create an (empty) SSH config file ----\ntouch ~/.ssh/config\n\n# Change config file permissions ----\n# (only Jane can read and write this file)\nchmod 600 ~/.ssh/config\n\n# Open the config file with the nano text editor ----\nnano ~/.ssh/config\nNow add the follow lines in the SSH config file:\nHost rossinante\n    HostName 92.168.45.3\n    Port 22\n    User jdoe\nPress CTRL + X, then Y and Enter to save changes and exit the nano editor.\nYou can now connect to Rossinante as follow:\n# SSH connection to Rossinante ----\nssh rossinante"
  },
  {
    "objectID": "chapters/setup.html#generating-ssh-keys",
    "href": "chapters/setup.html#generating-ssh-keys",
    "title": "2  Setup",
    "section": "2.3 Generating SSH keys",
    "text": "2.3 Generating SSH keys\nSSH keys are a more secure method of logging into a remote server, because they are not vulnerable to common brute-force password hacking attacks. Generating an SSH keys pair consists in creating two long strings of characters: a public and a private key. You can place the public key on any server, and then connect to the server using a device that has access to the private key.\nLet’s create a new SSH keys pair using the cryptosystem ed25519. You will create this SSH keys pair locally (i.e. on your laptop).\n# Create a new SSH key pair (on your laptop) ----\nssh-keygen -t ed25519 -f ~/.ssh/id_rossinante -C \"jane.doe@mail.com\"\nIf you want, you can add a passphrase to increase the security of your key pair but each time you will connect to Rossinante you will be asked to enter it. It’s up to you.\nThis SSH keys pair has been stored in ~/.ssh/ under the name id_rossinante.\n# Content of the ~/.ssh/ folder ----\nls ~/.ssh\n## config       id_rossinante       id_rossinante.pub\nThe private key is id_rossinante and the public one id_rossinante.pub. Nobody (except you) can have access to the private key. So you need to change the permissions of this file:\n# Change private key permissions ----\n# (only Jane can only read this file)\nchmod 400 ~/.ssh/id_rossinante\nAs we set a custom key file name (id_rossinante instead of id_ed25519), we will store this file name in the ~/.ssh/config file:\n# Add an entry in the config file ----\necho \"    IdentityFile ~/.ssh/id_rossinante\" >> ~/.ssh/config\nThe SSH public key can be deployed everywhere. In our case, we must store it on the Rossinante server.\n# Create the folder ~/.ssh on Rossinante ----\n# (here we send a command via SSH without keeping the connection open)\nssh rossinante 'mkdir -p ~/.ssh'\n\n# Copying the public key to Rossinante ----\nscp ~/.ssh/id_rossinante.pub rossinante:~/.ssh/authorized_keys\nNow we can connect to Rossinante more securely and without entering any password (except if you have added a passphrase to your SSH keys pair).\n# SSH connection using SSH keys ----\nssh rossinante\nOur SSH public key on Rossinante has been stored under the name authorized_keys.\n# Content of the ~/.ssh folder (on Rossinante) ----\nls ~/.ssh\n## authorized_keys\nNB – If you lose you private key you will still be able to log in with your password."
  },
  {
    "objectID": "chapters/setup.html#git-credentials",
    "href": "chapters/setup.html#git-credentials",
    "title": "2  Setup",
    "section": "2.4 Git credentials",
    "text": "2.4 Git credentials\nThe version control system git is already installed on Rossinante, but you need to store your username and email (required for commits). Run the following lines:\n# SSH Connection to Rossinante ----\nssh rossinante\n\n# Set Git credentials on Rossinante (globally) ----\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email jane.doe@mail.com\n\n# Change default branch name ----\ngit config --global init.defaultBranch main\nA ~/.gitconfig file has been created:\n# Content of the ~/.gitconfig file ----\ncat ~/.gitconfig\n## [user]\n##          name  = Jane Doe\n##          email = jane.doe@mail.com\n## [init]\n##          defaultBranch = main\nYou can also define git parameters locally, i.e. specific to a project. For more information."
  },
  {
    "objectID": "chapters/setup.html#github-ssh-keys",
    "href": "chapters/setup.html#github-ssh-keys",
    "title": "2  Setup",
    "section": "2.5 GitHub SSH keys",
    "text": "2.5 GitHub SSH keys\nIf you want to communicate with GitHub through the SSH protocol (recommended) you need to generate a new SSH keys pair (different from the one used to connect to Rossinante).\nLet’s create a new SSH keys pair using the cryptosystem RSA and a key size of 4096 bits. But this time, this SSH keys pair will be generated on Rossinante.\n# Create a new SSH key pair (on Rossinante) ----\nssh-keygen -f ~/.ssh/id_rsa -t rsa -b 4096 -C \"jane.doe@mail.com\"\nThis new SSH keys pair has been stored in ~/.ssh/.\n# Content of the ~/.ssh folder ----\nls ~/.ssh\n## authorized_keys       id_rsa       id_rsa.pub\nLet’s restrict the access to the private key.\n# Change private key permissions ----\n# (only jdoe can only read this file)\nchmod 400 ~/.ssh/id_rsa\nNow we need to store the public key on GitHub server. Visit https://github.com/settings/keys and click on New SSH key.\nOn Rossinante, print the public SSH key:\n# Print the public SSH key ----\ncat ~/.ssh/id_rsa.pub\nCopy the content of the public key and go back to GitHub. Give a title to your new SSH key (for example Rossinante key) and paste your public SSH key. Click on Add SSH key.\nCongratulation! You can know communicate with GitHub using the SSH protocol from Rossinante. Let’s test the SSH connection between Rossinante and GitHub:\n# Test SSH connection between Rossinante and GitHub ----\nssh -T git@github.com\n## Hi janedoe! You've successfully authenticated!, but GitHub does not provide shell access.\nImportant – If you lose your private SSH key you won’t be able to establish a connection with GitHub (from Rossinante). You’ll need to delete your SSH key on GitHub (i.e. Rossinante key) and to create a new one.\nNB – You will need to add your private GitHub SSH key on your other devices. Alternatively (recommended) you can create a new GitHub SSH keys pair on each device (if not already done)."
  },
  {
    "objectID": "chapters/setup.html#github-pat",
    "href": "chapters/setup.html#github-pat",
    "title": "2  Setup",
    "section": "2.6 GitHub PAT",
    "text": "2.6 GitHub PAT\nIf you want to use the GitHub API, essentially with the R package usethis, you need to create a GitHub Personal Access Token (PAT). Visit https://github.com/settings/tokens and click on Generate new token (classic). Choose a name for the token (for example Rossinante token), select an expiration date (or no expiration), and choose the scope (at least): repo and workflow. Copy the GitHub PAT and go back to Rossinante shell.\nYou will store this token in the file ~/.Renviron (readable by R only).\n# Store GitHub PAT on Rossinante (for R only) ----\necho \"GITHUB_PAT=ghp_XXX\" >> ~/.Renviron\nMake sure to replace ghp_XXX by your token value.\nCongratulations! Your Rossinante account is successfully set up."
  },
  {
    "objectID": "chapters/good-practices.html",
    "href": "chapters/good-practices.html",
    "title": "3  Good practices",
    "section": "",
    "text": "One rule: BE ALTRUISTIC\n\nAlways ask others if you can use the server. Post a message on the Slack Channel #rossinante and explain your needs.\nDo not use all available cores.\nDo not use Rossinante for developing code (except for small fixes). Write your code on your laptop and only use Rossinante to run analyses.\nDo not use RStudio Server to run time consuming analyses. Prefer using the command screen.\nRossinante is NOT A STORAGE SERVER. Remove your large dataset if you do not need them anymore.\nStore your large dataset in the external drives (e.g. /media/seagate/jdoe/).\n\n\n\n\n\n\n\nImportant\n\n\n\nIf you do not respect these rules the administrator will act accordingly."
  },
  {
    "objectID": "chapters/sending-files.html#sftp",
    "href": "chapters/sending-files.html#sftp",
    "title": "4  Sending files",
    "section": "4.1 sFTP",
    "text": "4.1 sFTP\nThe easiest way to transfer files from your laptop to Rossinante (or vice versa) is by using the sFTP protocol (Secure File Transfer Protocol). The Filezilla client is a freeware that supports this protocol. You will need to define the following parameters (Figure 4.1):\n\nHost: sftp://92.168.45.3\nUsername: jdoe (Rossinante username)\nPassword: your Rossinante user’s password\nPort: 22 (SSH port)\n\nTo make the connection, click on Quick connect.\n\n\n\nFigure 4.1: Filezilla interface\n\n\nThe left panel A lists your local folders/files. The right panel B shows the content of your personal directory on Rossinante.\nTo send local files to Rossinante, first select the directory in B to send these files in. Then select files/folders in A, right click, and click on Upload.\nTo send remote files to your laptop, first select the directory in A to send these files in. Then select the files in B, right click, and click on Download."
  },
  {
    "objectID": "chapters/sending-files.html#the-scp-command",
    "href": "chapters/sending-files.html#the-scp-command",
    "title": "4  Sending files",
    "section": "4.2 The scp command",
    "text": "4.2 The scp command\nThe Secure copy utility allows you to copy files from your laptop to a remote server (and vice versa) using the SSH protocol.\nLet’s say we want to copy the local file script.R, located in the Documents/ folder, to Rossinante in the folder ~/projects/. We will use scp as follow:\n# Send a file to Rossinante ----\nscp ~/Documents/script.R rossinante:~/projects/\nIf we want to download a file from Rossinante:\n# Download a file from Rossinante ----\nscp rossinante:~/projects/script.R ~/Documents/\nTo copy a folder (and its subfolders), we will add the option -r (for recursive):\n# Send a folder to Rossinante ----\nscp -r ~/Documents/project_1 rossinante:~/projects/\n\n# Download a folder from Rossinante ----\nscp -r rossinante:~/projects/project_1 ~/Documents/\nYou can use the option -p to preserve modification times, access times, and modes from the original file(s). This can be useful when you want to copy a project tracked by git.\n# Send a folder to Rossinante (and preserve modification times) ----\nscp -r -p ~/Documents/project_1 rossinante:~/projects/\nNB – You can also use the command rsync instead of scp. For further information."
  },
  {
    "objectID": "chapters/sending-files.html#github",
    "href": "chapters/sending-files.html#github",
    "title": "4  Sending files",
    "section": "4.3 GitHub",
    "text": "4.3 GitHub\nIf your project is tracked by the versioning system control git, you may prefer sending files through GitHub (or GitLab). This method has the advantage of keeping your project tracked by git and synchronized with GitHub.\nThe workflow is the following (Figure 4.2):\n\nOn your laptop, commit changes\nThen push changes to your repository on GitHub\nConnect to Rossinante via SSH (or RStudio Server)\nClone the GitHub repository on Rossinante or pull changes if your project is already cloned\nRun analysis on Rossinante\n\n\n\n\nFigure 4.2: Sending files from local to Rossinante using GitHub\n\n\nOnce your analysis is finished, you can (Figure 4.3):\n\nTrack new files and commit changes\nPush changes to your repository on GitHub\nOn your laptop, pull changes\n\n\n\n\nFigure 4.3: Sending files from Rossinante to local using GitHub\n\n\nAt this stage, the project on your laptop, GitHub and Rossinante is in the same state.\nImportant – GitHub does not accept file > 100MB. If your project contains large datasets (added in the .gitignore), you need to send these files through sFTP or scp (Figure 4.4).\n\n\n\nFigure 4.4: Sending files between devices using GitHub and sFTP\n\n\nIf your results (created on Rossinante) are > 100MB, you will need to add theses files to the .gitignore and send them to your laptop with the sFTP protocol."
  },
  {
    "objectID": "chapters/working-with-r.html#rstudio-server",
    "href": "chapters/working-with-r.html#rstudio-server",
    "title": "5  Working with R",
    "section": "5.1 RStudio Server",
    "text": "5.1 RStudio Server\n\n\n\nFigure 5.1: RStudio Server interface\n\n\nTo open the RStudio Server interface, you first need to create an SSH tunneling (or port forwarding). This method consists in creating an encrypted SSH connection between a client (your laptop) and a server (Rossinante) through which a service (Rstudio Server) port (8787) can be relayed.\nTo create an SSH port forwarding, pass the -L option to the ssh client:\n# Start an SSH port forwarding ----\nssh -L 8787:localhost:8787 rossinante\nThe first 8787 is your local port through RStudio Server will be relayed. The second 8787 is the port on Rossinante through RStudio Server is running. In short, localhost is your laptop. Instead of localhost you could have written 127.0.0.1. You can change the first 8787 for any number greater than 1024.\nYou are now connected to Rossinante.\nTo start the RStudio Server interface, open a web browser (Firefox, Chrome, etc.) and enter the following URL: http://localhost:8787.\nAfter entering your Rossinante log in information, you are connected to a new RStudio Server instance. You can now use this interface as the one you know (RStudio Desktop).\nRStudio Server has two buttons to close the interface: Sign out (B in Figure 5.1) and Quit current R session (C in Figure 5.1). If you click on Sign out, your session will be still active (in background) and you will have access to objects when you will log in again. You need to click on that button if you have launched time consuming analysis. If you click on Quit current R session you will stop all analyses and you were not able to access R objects. Click on that button to terminate your session.\n\n\n\n\n\n\nWarning\n\n\n\nIf you stop your SSH (port forwarding) session, you will close the RStudio Server session. Before shutting down the SSH connection, click on Sign out or Quit current R session to securely close the RStudio Server instance.\n\n\n\n\n\n\n\n\nTrick\n\n\n\nIf you have been disconnected from RStudio Server (network crash, power failure, etc.), you may not be able to restart RStudio Server (blank page). In that case, you need to kill your previous R sessions (still active) as follow:\n# SSH connection to Rossinante ----\nssh rossinante\n\n# Erase all active R sessions ----\nkillall -u jdoe rsession\n\n# Hardcore method ----\nrm -rf ~/.local/share/rstudio/sessions/active/session-*"
  },
  {
    "objectID": "chapters/working-with-r.html#r-in-the-terminal",
    "href": "chapters/working-with-r.html#r-in-the-terminal",
    "title": "5  Working with R",
    "section": "5.2 R in the terminal",
    "text": "5.2 R in the terminal\nAn alternative is to launch the R console directly from the terminal of Rossinante. And this is very easy.\n# SSH connection to Rossinante ----\nssh rossinante\n\n# Launch R console from terminal ----\nR\n\n## R version 4.2.3 (2023-03-15) -- \"Shortstop Beagle\"\n## Copyright (C) 2023 The R Foundation for Statistical Computing\n## Platform: x86_64-pc-linux-gnu (64-bit)\n##\n## R is free software and comes with ABSOLUTELY NO WARRANTY.\n## You are welcome to redistribute it under certain conditions.\n## Type 'license()' or 'licence()' for distribution details.\n##\n## R is a collaborative project with many contributors.\n## Type 'contributors()' for more information and\n## 'citation()' on how to cite R or R packages in publications.\n##\n## Type 'demo()' for some demos, 'help()' for on-line help, or\n## 'help.start()' for an HTML browser interface to help.\n## Type 'q()' to quit R.\nTo close your R session:\n# Close R session ----\nq(\"no\")\n\n\n\n\n\n\nThe Rscript command\n\n\n\nIf you want, you can also use the command Rscript to run an R script (or an R expression) without opening the R console, directly from the terminal.\n# Run an R expression (option '-e') ----\nRscript -e 'print(\"El ingenioso Hidalgo don Quijote de la Mancha\")'\n## [1] \"El ingenioso Hidalgo don Quijote de la Mancha\"\n\n# Write an R script on the personal folder ----\necho 'print(\"El ingenioso Hidalgo don Quijote de la Mancha\")' > ~/quijote.R\n\n# Print 'quijote.R' file content ----\ncat ~/quijote.R\n## print(\"El ingenioso Hidalgo don Quijote de la Mancha\")\n\n# Run the R script ----\nRscript ~/quijote.R\n## [1] \"El ingenioso Hidalgo don Quijote de la Mancha\"\n\n# Remove the R script ----\nrm ~/quijote.R"
  },
  {
    "objectID": "chapters/working-with-r.html#r-in-a-screen",
    "href": "chapters/working-with-r.html#r-in-a-screen",
    "title": "5  Working with R",
    "section": "5.3 R in a screen",
    "text": "5.3 R in a screen\nIf you launch R in the terminal (or Rscript) and your code takes time to be computed, you cannot use the terminal until the computation is done. The job is running in foreground. Moreover, if your SSH connection is stopped, your R session is aborted and your work is lost.\nThe solution is to use a terminal multiplexer like screen or tmux. These tools open virtual terminals (screens) in the main terminal and you can navigate between screens and the main terminal. The idea is to create (attach) a new screen, launch your analysis, go back to the main terminal (detach), and work on other stuffs. If you stop your SSH connection, the analysis is still running, and if you make a new SSH connection to Rossinante, you can reattach the screen and resume your R session.\nLet’s take an example with screen:\n# SSH connection to Rossinante ----\nssh rossinante\n\n# Attach (create) a new screen (named 'r_analysis', for instance) ----\nscreen -S r_analysis\n\n# Open R console (in the new screen) ----\nR\n\n# Launch the analysis ----\nsource(\"script_analysis.R\")\nTo detach from the screen session, type CTRL + A and D.\nYou can list running screens as follow:\n# List running screens ----\nscreen -ls\n## There is a screen on:\n##         4002.r_analysis (Detached)\nTo reattach a screen session, use the following command:\n# Reattach a screen ----\nscreen -r r_analysis\nTo close a screen, type exit in the screen or press CTRL + A and K."
  },
  {
    "objectID": "chapters/working-with-r.html#r-packages",
    "href": "chapters/working-with-r.html#r-packages",
    "title": "5  Working with R",
    "section": "5.4 R packages",
    "text": "5.4 R packages\nOnly base R packages are installed and shared among users. Each user has a personal R library in which he can install/update every R packages he wants (independently of other users). This library is located in ~/R/x86_64-pc-linux-gnu-library/4.2/.\nNB – Some R packages require system libraries and some of them may be missing on Rossinante. Please contact the administrator to solve the issue."
  },
  {
    "objectID": "chapters/working-with-python.html",
    "href": "chapters/working-with-python.html",
    "title": "6  Working with Python",
    "section": "",
    "text": "Work in progress…\n# Create an SSH Tunneling ----\nssh -L 8888:localhost:8888 rossinante\n\n# Start Jupyter Notebook server ----\njupyter notebook --no-browser --port 8888\nThen, on your Web browser, go to http://127.0.0.1:8888"
  },
  {
    "objectID": "chapters/working-with-docker.html",
    "href": "chapters/working-with-docker.html",
    "title": "7  Working with Docker",
    "section": "",
    "text": "Work in progress…"
  },
  {
    "objectID": "chapters/parallel-computing.html",
    "href": "chapters/parallel-computing.html",
    "title": "8  Parallel computing",
    "section": "",
    "text": "Work in progress…"
  },
  {
    "objectID": "chapters/linux-cheatsheet.html#getting-help",
    "href": "chapters/linux-cheatsheet.html#getting-help",
    "title": "Appendix A — Linux Cheat Sheet",
    "section": "A.1 Getting help",
    "text": "A.1 Getting help\n# Print the manual of the command <ls>\nman ls\n\n# Print examples of the command <ls>\ncurl https://cheat.sh/ls"
  },
  {
    "objectID": "chapters/linux-cheatsheet.html#working-w-directories",
    "href": "chapters/linux-cheatsheet.html#working-w-directories",
    "title": "Appendix A — Linux Cheat Sheet",
    "section": "A.2 Working w/ directories",
    "text": "A.2 Working w/ directories\n\nA.2.1 Directory content\n# List the content of the current directory\nls .\n\n# List the content of the current directory (shortcut)\nls\n\n# List the content of the folder <sancho> (relative path)\nls sancho\n\n# List the content of the folder <sancho> (absolute path)\nls /media/sancho\n\n# List the content including hidden files\nls -a\n\n# List the content in a table-like format\nls -l\n\n# List the content in a table-like format with hidden files\nls -al\n\n# List the content recursively\nls -R\n\n# List the content in a table-like format and human-readable\nls -lh\n\n# List the content in a tree-like format\ntree\n\n# List the content including hidden files\ntree -a\n\n# Limit to two levels\ntree -L 2\n\n\nA.2.2 Directory navigation\n# Print the current directory\npwd\n\n# Go to your home directory\ncd /home/jdoe\n\n# Go to your home directory (shortcut)\ncd ~\n\n# Go to your home directory (shortcut)\ncd\n\n# Move one level up (parent directory)\ncd ..\n\n# Move two levels up\ncd ../..\n\n# Go to a directory (relative path)\ncd .ssh\n\n# Go to a directory (absolute path)\ncd ~/.ssh\n\n# Go to a subdirectory (absolute path)\ncd /media/sancho\n\n\nA.2.3 Creating directories\n# Create the directory <foo> in the current directory\nmkdir ./foo\n\n# Create the directory <foo> in the current directory (shortcut)\nmkdir foo\n\n# Create nested directories\nmkdir -p foo/bar/baz\n\n# Create <foo/bar> and <foo/baz> directories\nmkdir -p foo/{bar,baz}\n\n\nA.2.4 Copying directories\n# Copy a directory and its content\n# (if bar/ exists foo/ is copied inside)\ncp -r foo bar\n\n# Copy only the content of a directory\n# (bar/ must exist)\ncp -r foo/* bar/\n\n# Copy a directory and ask before overwriting\ncp -i -r foo/* bar/\n\n\nA.2.5 Moving directories\n# Move a directory into an existing directory\nmv source existing_directory\n\n\nA.2.6 Renaming directories\n# Rename a directory (the target is not an existing directory)\nmv source target\n\n\nA.2.7 Deleting directories\n# Delete a directory and its content\nrm -r foo\n\n# Delete a subdirectory\nrm -r foo/bar\n\n# Delete a directory and its content (force mode)\nrm -rf foo"
  },
  {
    "objectID": "chapters/linux-cheatsheet.html#working-w-files",
    "href": "chapters/linux-cheatsheet.html#working-w-files",
    "title": "Appendix A — Linux Cheat Sheet",
    "section": "A.3 Working w/ files",
    "text": "A.3 Working w/ files\n\nA.3.1 Creating files\n# Create a new empty file in the current directory\ntouch newfile.txt\n\n# Create a new file and add content on-the-fly\necho 'Line 1\\nLine 2' > newfile.txt\n\n# Create and open a new file in the NANO text editor\n# (press CTRL + X, then Y and ENTER to save and exit)\nnano newfile.txt\n                                         \n# Create a new file and add content interactively\n# (press CTRL + D to save the file)\ncat > newfile.txt\n\n\nA.3.2 Editing files\n# Add content at the end of an existing file\necho 'Line 3\\nLine 4' >> file.txt\n\n# Open an existing file in the NANO text editor\n# (press CTRL + X, then Y and ENTER to save and exit)\nnano file.txt\n\n# Add content interactively to an existing file\n# (press CTRL + D to save the file)\ncat >> file.txt\n\n\nA.3.3 Printing file content\n# Print file content\ncat file.txt\n\n# Open a file for interactive reading\nless file.txt\n\n# Print the first 10 lines of a file\nhead file.txt\n\n# Print the first 6 lines of a file\nhead -n 6 file.txt\n\n# Print the last 10 lines of a file\ntail file.txt\n\n# Print the last 6 lines of a file\ntail -n 6 file.txt\n\n# Dynamic - Useful for logs\ntail -f file.txt\n\n\nA.3.4 Copying files\n# Copy a file in the same location\ncp file.txt copy.txt\n\n# Copy a file in a different directory\ncp file.txt folder/copy.txt\n\n\nA.3.5 Moving files\n# Move a file to a new location\nmv file.txt new/location/\n\n\nA.3.6 Renaming files\n# Rename a file\nmv file.txt new_name.txt\n\n# Move and rename a file\nmv file.txt new/location/new_name.txt\n\n\nA.3.7 Deleting file\n# Delete a file\nrm file.txt\n\n# Delete a file (force mode)\nrm -f file.txt\n\n\nA.3.8 Joining files\n# Merge two files in one\ncat file-1.txt file-2.txt > file-3.txt"
  },
  {
    "objectID": "chapters/linux-cheatsheet.html#useful-commands",
    "href": "chapters/linux-cheatsheet.html#useful-commands",
    "title": "Appendix A — Linux Cheat Sheet",
    "section": "A.4 Useful commands",
    "text": "A.4 Useful commands\n# Clear the terminal\nclear\n\n# Get the size of the current directory\ndu -sh .\n\n# Print the command lines history\nhistory\n\n# Search for a previous command\n# CTRL + R and type some characters of the command\n\n# Create a new screen\nscreen -S screen_name\n\n# Detach a screen\n# (press CTRL + A + D to leave the screen)\n\n# Reattach a screen\nscreen -r screen_name\n\n# List existing screens\nscreen -ls\n\n# Kill all R processes for a specific user\nkillall -u jdoe R\n\n# Kill all RStudio processes for a specific user\nkillall -u jdoe rsession\n\n# System monitoring utilities\ntop\nhtop\nbtop\n\n# Count number of files (and folders) in the current directory\nls | wc -l\n\n# List all files/folders matching a pattern\nls | grep \"\\\\.md$\"\n\n# List all files/folders matching a pattern (case insensitive)\nls | grep -i \"\\\\.md$\""
  }
]